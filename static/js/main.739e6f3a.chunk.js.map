{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","replace","CardList","friends","map","friend","i","src_components_Card","key","SearchBox","searchChange","Fragment","class","style","min-width","type","placeholder","onChange","Scroll","props","overflowY","height","children","getDataFromAPI","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","localJSON","onSearchChange","bind","assertThisInitialized","event","setState","target","value","_this2","fetch","then","response","json","data","console","log","catch","error","_this3","filteredfriends","filter","toLowerCase","includes","length","src_components_SearchBox","components_Scroll","components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAgBeA,SAbF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,MACtB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACXH,EAAAC,EAAAC,cAAA,OACIE,IAAK,SAAWP,EAChBQ,IAAG,wBAAAC,OAA0BR,EAAKS,QAAQ,MAAM,IAA7C,mBAEPP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAML,GACpBE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASJ,MCUnBS,EAlBE,SAAAZ,GAAiB,IAAda,EAAcb,EAAda,QAEhB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACXM,EAAQC,IAAI,SAACC,EAAQC,GAClB,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKH,EAAOd,GACZA,GAAIc,EAAOd,GACXC,KAAMa,EAAOb,KACbC,MAAOY,EAAOZ,YCOvBgB,SAjBG,SAAAnB,GAAsB,IAAnBoB,EAAmBpB,EAAnBoB,aACjB,OACIhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KACIjB,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,sBACPlB,EAAAC,EAAAC,cAAA,SACIC,UAAU,uBACVgB,MAAS,CAACC,YAAa,KACvBC,KAAK,SACLC,YAAY,SACZC,SAAUP,KAGlBhB,EAAAC,EAAAC,cAAA,KAAGgB,MAAM,mBAAT,yCCLGM,EARA,SAACC,GACZ,OACIzB,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACO,UAAW,SAAUC,OAAQ,UAA1C,IACKF,EAAMG,kBCMfC,GAAiB,EAwDNC,cArDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,YAAa,GACb9B,QAAUoB,EAAkB,GAAKW,GAKrCT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATZA,8EAYCa,GAGXV,KAAKW,SAAS,CAAEN,YAAaK,EAAME,OAAOC,oDAG3B,IAAAC,EAAAd,KAEXL,GAEJoB,MA3BM,8CA4BDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFL,EAAKH,SAAS,CAAEpC,QAAS4C,IACzBC,QAAQC,IAAIF,KAEfG,MAAO,SAAAC,GAAUH,QAAQC,IAAI,UAAUE,sCAGvC,IAAAC,EAAAxB,KAECyB,EAAkBzB,KAAKI,MAAM7B,QAAQmD,OAAO,SAAAjD,GAC9C,OAAOA,EAAOb,KACT+D,cACAC,SAASJ,EAAKpB,MAAMC,YAAYsB,iBAGzC,OAAI3B,KAAKI,MAAM7B,QAAQsD,OAIrB/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAC8D,EAAD,CAAWhD,aAAckB,KAAKO,iBAC9BzC,EAAAC,EAAAC,cAAC+D,EAAD,KACIjE,EAAAC,EAAAC,cAACgE,EAAD,CAAUzD,QAASkD,MANhB3D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,6BAzCDgE,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.739e6f3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className=\"card tc bg-mid-white dib pa3 ma2 grow\">\r\n            <img\r\n                alt={'person' + id}\r\n                src={`https://robohash.org/${name.replace(/\\s/g,'')}?size=200x200`}\r\n            />\r\n            <h2 className=\"f4\">{name}</h2>\r\n            <p className=\"f6-ns\">{email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ friends }) => {\r\n\r\n    return (\r\n        <div className ='w-80-l center pt2'>\r\n            {friends.map((friend, i) => {\r\n                return (\r\n                    <Card\r\n                        key={friend.id}\r\n                        id={friend.id}\r\n                        name={friend.name}\r\n                        email={friend.email}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import './SearchBox.css';\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div class=\"search-wrapper pa3\">\r\n                <input                \r\n                    className=\"f3-m pa1 b--black-05\"\r\n                    style = {{\"min-width\": 250 }}\r\n                    type=\"search\"\r\n                    placeholder=\"Search\"\r\n                    onChange={searchChange}\r\n                />            \r\n            </div>\r\n            <p class=\"description mb4\"> Start by typing in the search box</p>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}> {/* border: '1px solid black', */}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\n// source of data options\r\nimport localJSON from './people_data.json';  //local json if you don't have internet\r\nimport { friends } from './friends'; \r\nlet apiData = \"https://jsonplaceholder.typicode.com/users\"; // Fake Online REST API  \r\n\r\nlet getDataFromAPI = false;\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            searchField: '',\r\n            friends: (getDataFromAPI) ? [] : localJSON,\r\n            // friends: friends, // if you want local data from friends.js\r\n            // friends: localJSON // if you want local data from json file\r\n        };\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this); //or use arrow functions onSearchChange = (event) =>\r\n    }\r\n\r\n    onSearchChange(event) {\r\n        // used explicit binding so that this does not refer to the input box\r\n\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        if(!getDataFromAPI) return;\r\n\r\n        fetch(apiData)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ friends: data})\r\n                console.log(data)\r\n            })\r\n            .catch( error => {console.log('error: ',error)})\r\n    }\r\n\r\n    render() {\r\n        // filter friends that contains the string input in the search box\r\n        const filteredfriends = this.state.friends.filter(friend => {\r\n            return friend.name\r\n                .toLowerCase()\r\n                .includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        if(!this.state.friends.length) {\r\n            return <h1 className=\"tc\">Loading friends...</h1>;\r\n        } else\r\n        return (\r\n          <div className=\"tc mt3\">\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <CardList friends={filteredfriends} />\r\n            </Scroll>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\n// import Hello from './Hello';\r\nimport App from './containers/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// ReactDOM.render(\r\n//     <Hello greetings=\"BOOYAH\"/>, document.getElementById('root')\r\n// );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}