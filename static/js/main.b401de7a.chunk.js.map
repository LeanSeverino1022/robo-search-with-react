{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","replace","CardList","robots","map","robot","i","src_components_Card","key","SearchBox","searchChange","style","minWidth","type","placeholder","onChange","Scroll","props","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","defineProperty","searchField","jsonData","onSearchChange","bind","assertThisInitialized","event","setState","target","value","fetch","then","response","json","data","console","log","catch","error","_this2","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAgBeA,SAbF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,MACtB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6DACXH,EAAAC,EAAAC,cAAA,OACIE,IAAK,QAAUP,EACfQ,IAAG,wBAAAC,OAA0BR,EAAKS,QAAQ,MAAM,IAA7C,mBAEPP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAML,GACpBE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASJ,MCUnBS,EAlBE,SAAAZ,GAAgB,IAAba,EAAab,EAAba,OAEhB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACXM,EAAOC,IAAI,SAACC,EAAOC,GAChB,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKH,EAAMd,GACXA,GAAIc,EAAMd,GACVC,KAAMa,EAAMb,KACZC,MAAOY,EAAMZ,YCCtBgB,EAZG,SAAAnB,GAAsB,IAAnBoB,EAAmBpB,EAAnBoB,aACjB,OACIhB,EAAAC,EAAAC,cAAA,SACIe,MAAS,CAACC,SAAU,KACpBf,UAAU,mCACVgB,KAAK,SACLC,YAAY,8BACZC,SAAUL,KCCPM,EARA,SAACC,GACZ,OACIvB,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAACO,UAAW,SAAUC,OAAQ,UAA1C,IACKF,EAAMG,kBC2DJC,cArDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAALN,OAAAO,EAAA,EAAAP,CAAA,CACIQ,YAAa,GACb5B,OAAQ,IAFZ,SAIY6B,GAGZV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KATZA,8EAYCc,GAGXX,KAAKY,SAAS,CAAEN,YAAaK,EAAME,OAAOC,oDAO1CC,MAAM,wFACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAEFC,QAAQC,IAAIF,KAEfG,MAAO,SAAAC,GAAUH,QAAQC,IAAI,UAAUE,sCAGvC,IAAAC,EAAAxB,KAECyB,EAAiBzB,KAAKI,MAAM1B,OAAOgD,OAAO,SAAA9C,GAC5C,OAAOA,EAAMb,KACR4D,cACAC,SAASJ,EAAKpB,MAAME,YAAYqB,iBAGzC,OAAI3B,KAAKI,MAAM1B,OAAOmD,OAIpB5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAC2D,EAAD,CAAW7C,aAAce,KAAKQ,iBAC9BvC,EAAAC,EAAAC,cAAC4D,EAAD,KACI9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAUtD,OAAQ+C,MANfxD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,4BAzCD6D,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.b401de7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className=\"card tc b--lightest-blue bg-mid-white ba dib pa3 ma2 grow\">\r\n            <img\r\n                alt={'robot' + id}\r\n                src={`https://robohash.org/${name.replace(/\\s/g,'')}?size=200x200`}\r\n            />\r\n            <h2 className=\"f4\">{name}</h2>\r\n            <p className=\"f6-ns\">{email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div className ='w-80-l center pt2'>\r\n            {robots.map((robot, i) => {\r\n                return (\r\n                    <Card\r\n                        key={robot.id}\r\n                        id={robot.id}\r\n                        name={robot.name}\r\n                        email={robot.email}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <input\r\n            style = {{minWidth: 250 }}\r\n            className=\"f3-m mb4 pa3 ba b--lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"Search your friends by name\"\r\n            onChange={searchChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}> {/* border: '1px solid black', */}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { robots } from '../robots'; /* currently not used. used data fetched from jsonplaceholder API  */\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport jsonData from './robots_saved_online.json';\r\n\r\nlet url1 = \"https://jsonplaceholder.typicode.com/users\", // Fake Online REST API  \r\n    url2 = \"/robots_saved_online.json\";\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            searchField: '',\r\n            robots: [],\r\n            // robots: robots, // if you want local data from robots.js\r\n            robots: jsonData // if you want local data from json file\r\n        };\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this); //or use arrow functions onSearchChange = (event) =>\r\n    }\r\n\r\n    onSearchChange(event) {\r\n        // used explicit binding so that this does not refer to the input box\r\n\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n               // return;\r\n        // this.setState({ robots: tae})\r\n        fetch('https://raw.githubusercontent.com/jdorfman/awesome-json-datasets/master/package.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n               \r\n                console.log(data)\r\n            })\r\n            .catch( error => {console.log('error: ',error)})\r\n    }\r\n\r\n    render() {\r\n        // filter robots that contains the string input in the search box\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name\r\n                .toLowerCase()\r\n                .includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        if(!this.state.robots.length) {\r\n            return <h1 className=\"tc\">Loading Robots...</h1>;\r\n        } else\r\n        return (\r\n          <div className=\"tc mt3\">\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\n// import Hello from './Hello';\r\nimport App from './containers/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// ReactDOM.render(\r\n//     <Hello greetings=\"BOOYAH\"/>, document.getElementById('root')\r\n// );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}